var BattleStreams = require('./.sim-dist/battle-stream')
var Streams = require('./.lib-dist/streams')
var AI = require('./.sim-dist/tools/random-player-ai')

function parseStage(battle){
    console.log('weather', battle.field.weatherState.hasOwnProperty('id') ? battle.field.weatherState['id'] : '')
    console.log('duration', battle.field.weatherState.hasOwnProperty('duration') ? battle.field.weatherState['duration'] : '')
    var spikes0 = Object.hasOwnProperty(battle.sides[0]) ? battle.sides[0].sideConditions['spikes'] : 0
    var spikes1 = Object.hasOwnProperty(battle.sides[1]) ? battle.sides[1].sideConditions['spikes'] : 0
    var weather
    var weatherDuration

}

function parsePokemon(pokemon){
    //console.log('position', pokemon.position)
    console.log('species', pokemon.species.num)
    console.log('level', pokemon.level)
    console.log('gender', pokemon.gender)
    console.log('ev', pokemon.set.evs)
    console.log('iv', pokemon.set.ivs)
    console.log('nature', pokemon.set.nature)
    console.log('storedStats', pokemon.storedStats)
    console.log('baseMoveSlots', Object.keys(pokemon.baseMoveSlots))
    console.log('maxhp', pokemon.maxhp)
    console.log('hp', pokemon.hp)
    console.log('baseAbility', pokemon.baseAbility)
    console.log('item', pokemon.item)
    console.log('status', pokemon.status)
}

function parseActive(pokemon){
    console.log('boosts', pokemon.boosts)
    console.log('ability', pokemon.ability)
    console.log('moveSlots', Object.keys(pokemon.moveSlots))
}

function parseTeams(battle){
    console.log(battle.sides[0].team)
    console.log(battle.sides[1].team)
}

async function simulateBattle(array) {

    var battleStream = new BattleStreams.BattleStream()
    var streams = new BattleStreams.getPlayerStreams(battleStream)

    var q1 = new AI.RandomPlayerAI(streams.p1)
    var q2 = new AI.RandomPlayerAI(streams.p2)

    q1.start()
    q2.start()

    streams.omniscient.write('>start {"formatid" : "gen3randombattle"}\n')
    streams.omniscient.write('>player p1 {}\n')
    streams.omniscient.write('>player p2 {}\n')

    //parseTeams(battleStream.battle)

    for await (const chunk of streams.omniscient) {
        console.log(chunk)
        
        console.log('!!!')
        console.log('')
	}
    //the third execution here is the first turn of the game
    //every execution represents a decision node (not a turn! (know the difference!))

}
 
const readline = require("readline")
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

rl.on("line", async (line) => {
    var array = []
    await simulateBattle(array)
    //array.slice(2).map(parse)
    rl.prompt()
})

rl.prompt()