let BattleStreams = require('./pokemon-showdown/.sim-dist/battle-stream')
let AI = require('./pokemon-showdown/.sim-dist/tools/random-player-ai')

function clean(obj){
    return Object.values(obj).filter(x => x!==Object(x))
}

function fastParse(battleStream){

    function fastParseMon(mon){
        let s = ""
        s += `${mon.level},${mon.species.num},${mon.gender},${mon.hp},${mon.maxhp},${mon.status},${mon.item},${mon.ability}\n`
        s += mon.moveSlots.map(move => `(${move.id} : ${move.pp})`).join(' ') + '\n'
        s += Object.values(mon.storedStats).join(' ') + '\n'
        return s
    }

    function fastParseTeam(pokemon){
        let s = ""
        for (let i = 0 ; i < pokemon.length; ++i){
            let mon = pokemon[i]
            if (i == 0){
                s += JSON.stringify(Object.values(mon.volatiles).map(condition => clean(condition))) + '\n'
                s += JSON.stringify((Object.values(mon.side.slotConditions[0]).map(condition => clean(condition)))) + '\n'
                s += JSON.stringify(Object.values(mon.side.sideConditions).map(condition => clean(condition))) + '\n'
                s += Object.values(mon.boosts).join(' ') + '\n'
            }
            s += fastParseMon(mon)
        }
        return s
    }

    const battle = battleStream.battle
    let string = '%\n' //to be updated after 
    string += JSON.stringify(clean(battle.field.weatherState)) + '\n'

    string += fastParseTeam(battle.sides[0].pokemon)
    string += '|\n'
    string += fastParseTeam(battle.sides[1].pokemon)
    string += Object.keys(battle.sides[0].activeRequest || []) + '\n'
    string += Object.keys(battle.sides[1].activeRequest || []) + '\n'
    return string
}

async function simulateBattle() {

    let battleStream = new BattleStreams.BattleStream()
    let streams = new BattleStreams.getPlayerStreams(battleStream)
    let q1 = new AI.RandomPlayerAI(streams.p1)
    let q2 = new AI.RandomPlayerAI(streams.p2)
    q1.start()
    q2.start()
    streams.omniscient.write('>start {"formatid" : "gen3randombattle"}\n')
    streams.omniscient.write(`>player p1 {}\n`)
    streams.omniscient.write(`>player p2 {}\n`)

    let results = []

    let showCounter = -1 //keep this for the display function?
    results.push(fastParse(battleStream))
    for await (const chunk of streams.omniscient) {
        if (showCounter > 0){
            results.push(fastParse(battleStream))
        }
        showCounter += 1
	}
    results.pop()
    return results
}


void (async () => {
    data = []
    for (let i = 0; i < 10**2; ++i){
        //data = [...data, ...await simulateBattle()]
        await simulateBattle()
    }
    //console.log(...data)
})()
